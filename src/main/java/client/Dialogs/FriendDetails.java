package client.Dialogs;

import client.Book;
import client.Controller.ControllerBook;
import client.Controller.ControllerUser;
import client.MainLayout;
import client.TabelModels.ClassicBookTableModel;
import client.TabelModels.TableMouseListener;
import client.User;
import java.awt.Color;
import java.awt.Frame;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.border.LineBorder;

/**
 * Dialog Box which shows the details of the user searched
 *
 * @author er205
 */
public class FriendDetails extends javax.swing.JDialog {

    private Boolean isFollowed;
    private User user;

    private JMenuItem menuItemInfo;
    private JPopupMenu popupMenu;

    private ArrayList<Book> userBooks;

    /**
     * Constructor
     *
     * @param parent Parent Frame of the dialog, only used to centre the box on
     * top of the parent frame.
     * @param user user searched
     */
    public FriendDetails(java.awt.Frame parent, boolean modal, client.User user) {
        super(parent, "Friend Profile", modal);
        this.user = user;
        initComponents();
        setResizable(false);
        setLocationRelativeTo(parent);
        setUsersDetails();
        if (!user.email.equals("")) {
            this.user = user;
            populateTable(user.email);
            setButton();
        }
    }

    /**
     * Sets the colour and text of the Follow/Unfollow Button
     */
    public void setButton() {
        isFollowed = ControllerUser.isFollowing(user.email);
        if (this.isFollowed) {
            follow.setText("Unfollow");
            follow.setBackground(Color.red);
            follow.setBorder(new LineBorder(Color.black));
        } else {
            follow.setText("Follow");
            follow.setBackground(new Color(0, 204, 255));
            follow.setBorder(new LineBorder(new Color(0, 204, 255)));
        }
    }

    /**
     * Sets the logged in user details
     *
     * @param user logged in user
     */
    public void setUsersDetails() {
        name.setText(user.name + "'s Profile");
        email.setText("Email: " + user.email);
        city.setText("City: " + user.city);
        
        String userRating = ControllerUser.getUserRating(user.email);
        
        if(userRating.equals("")){
            ratingTxt.setText("No ratings");
        } else {
            ratingTxt.setText(userRating + "/5");
        }

    }

    /**
     * Sets the model for the browse books table and the user books table. This
     * will also populate the tables with data collected from the server via the
     * controller.
     */
    public void populateTable(String email) {

        userBooks = ControllerBook.getSearchedUserBooks(email);
        ClassicBookTableModel userBooksTableModel = new ClassicBookTableModel(userBooks);

        bookTable.setModel(userBooksTableModel);
        bookTable.setAutoCreateRowSorter(true);

        bookTable.addMouseListener(new TableMouseListener(bookTable));

    }

    /**
     * Deals with the retrieval of the book to request and sending it to the
     * controller.
     */
    private void processBookInfo() {
        int row = bookTable.getSelectedRow();

        Book selectedBook = userBooks.get(row);

        System.out.println("View info clicked");
        System.out.println("Title: " + selectedBook.getTitle());

        //Launch a new bookInfoDialog
        Frame topFrame = (Frame) SwingUtilities.getWindowAncestor(this);
        BookInfoDialog bookInfoDialog = new BookInfoDialog(topFrame, true, selectedBook);
        bookInfoDialog.setVisible(true);

    }

    /**
     * Method executed when the Follow button is pressed. Will send a post
     * request to the Server in order to follow a given user
     */
    public void onFollow() {
        Boolean response = ControllerUser.followUnfollowUser(user.email, "/follow");
        if (!response) {
            errorLabel.setText("An Error occurred");
        } else {
            errorLabel.setText("");
        }
    }

    /**
     * Method executed when the Unfollow button is pressed. Will send a post
     * request to the Server in order to unfollow a given user
     */
    public void onUnfollow() {
        Boolean response = ControllerUser.followUnfollowUser(user.email, "/follow/delete");
        if (!response) {
            errorLabel.setText("An Error occurred");
        } else {
            errorLabel.setText("");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        name = new javax.swing.JLabel();
        email = new javax.swing.JLabel();
        city = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        follow = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();
        name1 = new javax.swing.JLabel();
        reviewBtn = new javax.swing.JButton();
        ratingTxt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        name.setFont(new java.awt.Font("Lantinghei SC", 1, 18)); // NOI18N
        name.setForeground(new java.awt.Color(0, 204, 255));
        name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        name.setText("Name");

        email.setFont(new java.awt.Font("Lantinghei SC", 1, 14)); // NOI18N
        email.setForeground(new java.awt.Color(102, 102, 102));
        email.setText("Email");

        city.setFont(new java.awt.Font("Lantinghei SC", 1, 14)); // NOI18N
        city.setForeground(new java.awt.Color(102, 102, 102));
        city.setText("City");

        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        bookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bookTable);

        follow.setBackground(new java.awt.Color(0, 204, 255));
        follow.setFont(new java.awt.Font("Lantinghei SC", 1, 13)); // NOI18N
        follow.setForeground(new java.awt.Color(255, 255, 255));
        follow.setText("FOLLOW");
        follow.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        follow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                followActionPerformed(evt);
            }
        });

        errorLabel.setForeground(new java.awt.Color(204, 0, 0));
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        name1.setFont(new java.awt.Font("Lantinghei SC", 1, 14)); // NOI18N
        name1.setForeground(new java.awt.Color(0, 204, 255));
        name1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        name1.setText("Double click to view book info");

        reviewBtn.setBackground(new java.awt.Color(0, 204, 255));
        reviewBtn.setFont(new java.awt.Font("Lantinghei SC", 1, 13)); // NOI18N
        reviewBtn.setForeground(new java.awt.Color(255, 255, 255));
        reviewBtn.setText("REVIEW");
        reviewBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        reviewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviewBtnActionPerformed(evt);
            }
        });

        ratingTxt.setFont(new java.awt.Font("Mint Spirit", 1, 14)); // NOI18N
        ratingTxt.setForeground(new java.awt.Color(102, 102, 102));
        ratingTxt.setText("Rating");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(follow, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(email)
                                    .addComponent(city))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(errorLabel)
                        .addGap(97, 97, 97))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(name1, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ratingTxt)
                    .addComponent(reviewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name)
                    .addComponent(follow))
                .addGap(7, 7, 7)
                .addComponent(reviewBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(email)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ratingTxt)
                .addGap(8, 8, 8)
                .addComponent(city)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(name1)
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action listener which deals with the clicking on the Follow/Unfollow
     * Button
     *
     * @param evt Event evt, generated by the action listener.
     */
    private void followActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_followActionPerformed
        if (!isFollowed) {
            onFollow();
        } else {
            onUnfollow();
        }
        setButton();
        MainLayout.profileCard.displayFollowing();
    }//GEN-LAST:event_followActionPerformed

    private void reviewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviewBtnActionPerformed
        Frame topFrame = (Frame) SwingUtilities.getWindowAncestor(this);
        AddReviewDialog reviewDialog = new AddReviewDialog(topFrame, true, user);
        reviewDialog.setVisible(true);
        
        setUsersDetails();
    }//GEN-LAST:event_reviewBtnActionPerformed

    private void bookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookTableMouseClicked
        Point point = evt.getPoint();
        int currentRow = bookTable.rowAtPoint(point);
        bookTable.setRowSelectionInterval(currentRow, currentRow);
        String ISBN = (String) bookTable.getValueAt(currentRow, 2);

        if (evt.getClickCount() == 2) {
            processBookInfo();
        }
    }//GEN-LAST:event_bookTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookTable;
    private javax.swing.JLabel city;
    private javax.swing.JLabel email;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JButton follow;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel name;
    private javax.swing.JLabel name1;
    private javax.swing.JLabel ratingTxt;
    private javax.swing.JButton reviewBtn;
    // End of variables declaration//GEN-END:variables
}
